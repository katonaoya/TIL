セクション１ GitとGitHubってなに？
○Gitはファイルのバージョンを管理するためにある。
ファイルのバージョンを管理すれば、誰がいつ何を変更したかがわかり、ファイルの最新情報がわかる。
○GitHubとは
Gitリポジトリのホスティングサービス。Gitのファイルをオンライン上に保存してくれるもの。

セクション３Gitの仕組みと基本的なコマンド
○Gitの仕組みと基本的なコマンド
Gitはスナップショットでデータを記録している。
スナップショットとは、変更されたファイルは圧縮ファイルとなり丸ごと保存し、変更していない場合は変更保存を行わない。
・コミットが以前のコミットを記憶しているので、コミットを辿ればデータの記録の歴史がわかる。
○Gitの操作の流れ
・GitHubにデータをアップロードする流れ
リポジトリとは、履歴データの置き場。ローカルリポジトリとは、自分のパソコン内での履歴データの置き場のこと。
自分のパソコンの作業場でデータを変更する。そのスナップショットを記録し、ローカルリポジトリに保存する。
・GitHubから他の人が変更したデータを取得する場合。
アップロードの逆で、Git Hubからローカルリポジトリにデータを取得し、ワークツリー（自分の作業場）で反映する。
・ローカルは３つのエリアに分かれている。
ワークツリー
ファイルを変更する作業場
ステージ
コミット（スナップショットを記録）する変更を準備（git add）する場所
変更した部分だけを記録させるために一旦ステージにgit addする。
リポジトリ
ステージに追加した変更分のスナップショットを記録する。

○Gitはどのようにデータを管理しているのか
Gitのデータ構造がどのようになっているのか
・リポジトリに圧縮ファイル・ツリーコミットファイルを作成することでデータを保存している。
・コミットが親コミットを持つことで変更履歴を辿ることができる。
・Gitの本質はデータを圧縮して、スナップショットで保存していること。
・Gitのコマンドは、そのデータに対していろいろな操作をしている。

○Gitを始めよう
git initを行うことで.gitが作成される。これがローカルリポジトリ
git cloneを行うことで、ローカルにファイルと.gitリポジトリがコピーされる。
git commit -vでcommitの変更内容を見ることができる。
git statusでワークツリーとステージの中で変更されたファイルを表示する。

○何を変更したのかを確認する。
git diffでgit addする前の変更分を確認することができる。git addした後のファイルとリポジトリにあるファイルの変更分を見たい場合はgit diff --stagedで見ることができる。
○変更履歴の確認の仕方。
git logで今までのコミットの変更履歴を確認できる。ただし、全ての変更し歴が出てきてしまうので、膨大な量になる可能性もある。
git log --onelineで変更履歴を１行で表示する。
git log -p index.htmlでファイルの変更差分を表示する
git log -n <コミット数>で表示するコミット数を制限する。

○ファイルの削除
ファイルの削除を行うにはgit addやgit commitとは別のコマンドが必要になる。
git rm <ファイル名>
git rm -r <ディレクトリ名>
git rm -rm --cached <ファイル名>で自分のワークツリーには残しておきたいけどgit上では削除したい時（リポジトリからだけ削除したい時）
※rmはremoveのこと

○ファイルの移動を記録する
git mv <旧ファイル> <新しいファイル>ファイル名や場所の移動を記録することができる。

○Git Hubにpushする
git remote add origin "URL"でoriginというショートカットでURLのリモートリポジトリを登録することができる。
git remote -vで登録しているリモートリポジトリが確認できる。
git push <リモート名> <ブランチ名>でリモートリポジトリに送信する。

○Git Hubの使い方
ファイルないのRawはコピペするなどの時に使う。
Blameは責任者という意味で、誰がいつどの行を変更したかを記載されている。
Historyでcommitの履歴を見ることができる。

○コマンドのエイリアスについて
git config --global alias.<省略したコマンド> <省略したいコマンド>
--globalをつけるとPC全体の設定にすることができる。

○gitでバージョン管理したくないファイルについて
パスワードが記載されたファイルなどがバージョン管理したくないファイルに当たる。
.gitignoreファイルに入れたファイルはGitが管理しない。.gitignoreファイルに指定する。
○ファイルへの変更を取り消す。
git checkout --<ファイル名>ワークツリーのファイルの状態をステージの状態と同じにする。
git checkout --<ディレクトリ名>
git checkout -- .全ての変更を取り消す。
○ステージに追加した情報の取り消し
リポジトリから一つ前のcommitの情報をとってくる。HEADとは最新のcommitした情報のこと。reset HEADで最新のcommit情報にresetするよという意味。
git reset HEAD <ファイル名>ワークツリーのファイルには影響がない。
git reset HEAD <ディレクトリ名>
git reset HEAD.全ての変更を取り消す。
○直前のcommitをやり直す方法
commitの内容を変更したい時。commitメッセージを間違えた時などに使う。
git commit --amend今のステージの状態でcommitを上書きする。
amendは改正するという意味
※注意※
リモートリポジトリにPushしてしまうとcommitのやり直しはだめ。Pushする前のcommitだけの状態の時だけ使用する。
pushしたcommitの内容を変更したい場合は、改めてpushすることで修正する。
○リモートリポジトリについて
リモートリポジトリは複数登録できる。
git remote add <リモート名> <リモートURL>でリモートリポジトリを新規追加できる。
git remote add <リポジトリ名> URLでそのリポジトリに送信することができる。
git remote -vで登録してあるリモートリポジトリのURLを確認することができる。
○リモートから情報を取得する。
・フェッチ（とってくるという意味）
git fetch <リモート名>リモートリポジトリからローカルリポジトリにデータを取得してくる。ワークツリーには反映されない。
取得してきた除法がbranchに行く。git branch -aでbranchの情報を全て見る。
git merge <リモート名>でワークツリーにデータを反映させる。
・プル（引っ張ってくる）
git pull <リモート名> <ブランチ名>でリモートから情報をpullしてくる。
git pullのコマンドでfetchとmergeをいっぺんにやる形
※注意点※
pullは特殊な動きをするため、注意が必要
今自分のいるbranchにマージされてくるため、別のブランチにマージしたかった場合でも上書きされてしまう可能性がある。
○リモートについて
git remote show <リモート名>git remoteより詳しい情報を表示する
git remote rename <旧リモート名> <新リモート名>でリモート名を変更する。
git remote rm <リモート名>で削除する。
○ブランチとマージについて
・ブランチ
並行して複数機能を開発するためにあるのがブランチ。別の人が開発をしているものが反映されないように分岐をさせて各々で開発をすることができる。
コミットをさしたポインタ
コミット１ ← コミット２ ← コミット３ ← masterでmasterがコミット３からの流れを指している。
Gitのデータの持ち方
git branchでブランチの一覧を表示する。
git branch <ブランチ名>ブランチを作成する。ただし、ブランチの作成は行うけど切り替えは行わないので注意。
git checkout <既存ブランチ名>でブランチを切り替える。
git checkout -b <新ブランチ名>ブランチを新規作成して切り替える。
・マージ
マージとは他の人の変更内容を自分のブランチに取り込む作業のこと。
git merge <ブランチ名>作業中のブランチにマージする。
・コンフリクト
コンフリクトは複数人の人が同じ行に別々の変更を行なった時に、どの変更を優先していいのかわからなくなること
git statusで今ふりくを起こしたファイルを見ることができる。
コンフリクトを起こした後に対象のファイルを見に行くと、それぞれのブランチでどのような変更がなされたのかが記載してあるので、ファイルの中身を変更して保存する。
コンフリクトを修正した後にcommitをすると問題を解決することができる。
コンフリクトが起こらないようにするには
まずは複数人で同じファイルを変更しない。
puulやmergeする前に変更中の状態をなくしておく。（commitなどをしておく）
pullするときは、pullするブランチに移動してからpullする。
コンフリクトしても慌てずにゆっくり対処する。
git branch -m <ブランチ名>ブランチを変更する（moveのm）masterにマージされていない変更が残っている場合削除しない。
git branch -d <ブランチ名>（deleteのd）
git branch -D <ブランチ名>masterにマージされていない変更が残っていたとしても強制的に削除するコマンド
・ブランチの利用方法
masterブランチをリリース用ブランチに開発はトピックブランチを作成して進めるのが基本
・リモートブランチとは
リモートのブランチの状態へのポインタ。
リモートリポジトリのコミットファイルをローカルに取得できる。その際にorigin/masterのような名前で保存される。
○Git Hubを利用した開発手順の流れ
・プルリクエストについて
自分の変更したコードをリポジトリに取り込んでもらえるよう依頼する機能。コードを変更する際にレビューをもらってから取り組むため。
margeした後Git Hub上のブランチを削除する。
①masterブランチを最新に更新
②ブランチを作成
③ファイルを変更
④変更をコミット
⑤Git Hubへプッシュ
⑥プルリクエストを送る
⑦コードレビュー
⑧プルリクエストをマージ
・Git Hub Flow
Git Hub社の開発した流れのこと。
①masterブランチからブランチを作成
②ファイルを変更しコミット
③同名のブランチをGit Hubへプッシュ
④プルリクエストを送る
⑤コードレビューし、masterブランチにマージ
⑥masterブランチをデプロイ
・masterブランチは常にデプロイできる状態に保つ（今Pushしている内容と同じ内容にする）
・新開発はmasterブランチから新しいブランチを作成してスタート
・作成した新しいブランチ上で作業しコミットする
・定期的にPushする
・masterにマージするためにプルリクエストを使う
・必ずレビューを受ける
・masterブランチにマージしたらすぐにデプロイする。←テストとデプロイ作業は自動化
○リベースについて
変更を統合する際に、履歴を綺麗に整えるために使うのがリベース
git rebase <ブランチ名>コミットの内容を取り込んで、親コミットも取り込んだコミットのものとなる。
・注意点
Git HubにプッシュしたコミットをリベースするのはNG → プッシュできない。
・マージとリベースの使い分けについて
作業の履歴を残しておきたいならマージ
履歴を綺麗にしたいならリベースを使う
・プルにはマージ型とリベース型がある。
git pull <リモート名> <ブランチ名>プルのマージ型 マージしたという記録を残したい場合に使う。
git pull --rebase <リモート名> <ブランチ名>Git Hubの内容を取得したいだけの時に使う。
git config --global pull.rebase trueを設定しておくと、プルをリベース型で利用するという設定になる。
・リベースで履歴を書き換える
Git Hubにプッシュしていないコミットのみに行う。
git commit --amendで直前のコミットをやり直す。
git rebase -i <コミットID>複数のコミットをやり直す
最新のコミットであるHEADを基準にHEAD~1とするとその一個上の親コミットを示す。
・rebase -iコマンドの流れ
①git rebase -iコマンドで対話的リベースモードに入る
②修正したいコミットをeditにしてコミットエディタを終了する
③editのコミットのところでコミットの適用が止まる。
④git commit -amendコマンドで修正
⑤git rebase --continueで次のコミットへいく
⑥pickだとそのままのコミットの内容を適用して次へ行く
・コミットを並び替える、削除する。
コミットを削除する場合はコミットエディタ上で削除し、並び替えたい場合はコミットエディタ上で並び替える。
・コミットをまとめる
pickをaquashに変えると直前のコミットと一つにまとめてくれる。
・コミットを分割する
pickをeditに変える。
git resret HEAD^でコミットを取り消して、ステージングしていない状況にまで戻す。
git add <コミット名>でステージングに追加して
git commit -mでコミット
git add <コミット名>で分割したファイルをステージングに追加して
git commit -mでコミット
git rebase --continueで次の状態に進める。
○タグ付けについて
リリースポイントにタグをつけると良い
・git tagでタグが表示される。
git tag -l"指定"でパターンを指定したタグを表示
・タグの作成の仕方
タグには、注釈付き版と軽量版の２種類がある。
git tag -a タグ名 -m "メッセージ"で注釈付きタグ
git tag タグ名 軽量版のタグで、名前しかつけられない。
・タグを一斉に送信する
git push origin --tags
○作業を一時避難する
作業が途中でコミットしたくないけど別のブランチで作業しないといけない。そういう時に作業を一時避難させるやり方。
git stashで変更内容をstashに避難させる。
git stash listで避難した作業の一覧を表示する。
git stash apply最新の作業を復元する。
git stash apply --indexステージの状況も復元する
git stash apply スタッシュ名 特定の作業を復元する。
git stash drop で作業を削除する
git stash drop スタッシュ名 特定の作業を削除する
git stash clearで全作業を削除する。







Gitとはなんですか
Gitがないと何がつらいですか
ブランチとはなんですか
コミットとはなんですか
ローカルブランチとはなんですか
リモートブランチとはなんですか
コンフリクトとはなんですか。どういった場合におきますか。
プルリクエストとはなんですか
.gitignoreとはなんですか

フォークについて https://qiita.com/sky0621/items/8b6e88f4327b42ade5d7
1自分のGit Hubアカウントでログインしている時
2別アカウントのリポジトリをフォークする
すると自分のアカウント上で別アカウントのリポジトリが自分のものとして出来上がる。

1git remote add origin https://github.com/katonaoya/practice.git
git remote add origin "URL"でoriginというショートカットでURLのリモートリポジトリを登録することができる。
2git branch -M main 
チェックアウト中のカレンとブランチが指定されたものとみなされる。現在のブランチの名前をmainに変更する。
3git push -u origin main
1で指定したURLに2で指定したmainブランチをpushする。